[project]
name = "stargazers"
version = "1.2.2"
description = "Tools to help people shoot for the stars"
authors = [
    {name = "Robert Ferguson",email = "rmferguson@protonmail.com"}
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = []

[tool.poetry]

[tool.poetry.group.dev.dependencies]
isort = "^6.0.1"
black = "^25.1.0"
autoflake = "^2.3.1"
pytest = "^8.3.5"
slotscheck = "^0.19.1"
pylint = "^3.3.7"
hypothesis = {extras = ["cli"], version = "^6.131.18"}
mypy = "^1.15.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88

[tool.isort]
atomic = true
line_length = 88
skip_gitignore = true
known_first_party = ["pulsar", "stargazers"]

[tool.refurb]
ignore = [112]
enable_all = true
quiet = true
format = "text"
sort_by = "filename"

[tool.pylint.main]
fail-under = 10
ignore = ["ml_translations.py"]
ignore-paths = ["__pycache__\\\\*|__pycache__/*"]
ignore-patterns = ["^\\.#"]
jobs = 1
limit-inference-results = 100
persistent = true
py-version = "3.11"
suggestion-mode = true

[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_"]
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
no-docstring-rgx = "^_"
property-classes = ["abc.abstractproperty"]
variable-naming-style = "snake_case"
[tool.pylint.classes]
defining-attr-methods = ["__init__", "__new__", "setUp", "asyncSetUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make", "os._exit"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pylint.design]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-positional-arguments = 5
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.format]
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "

max-line-length = 88
max-module-lines = 10000

[tool.pylint.imports]
known-third-party = ["enchant"]

[tool.pylint.logging]
logging-format-style = "old"
logging-modules = ["logging"]

[tool.pylint."messages control"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]
disable = ["raw-checker-failed", "bad-inline-option", "locally-disabled", "file-ignored", "suppressed-message", "useless-suppression", "deprecated-pragma", "use-symbolic-message-instead", "use-implicit-booleaness-not-comparison-to-string", "use-implicit-booleaness-not-comparison-to-zero", "invalid-name", "disallowed-name", "typevar-name-incorrect-variance", "typevar-double-variance", "typevar-name-mismatch", "empty-docstring", "missing-module-docstring", "missing-class-docstring", "missing-function-docstring", "singleton-comparison", "unidiomatic-typecheck", "bad-classmethod-argument", "bad-mcs-method-argument", "bad-mcs-classmethod-argument", "single-string-used-for-slots", "unnecessary-dunder-call", "line-too-long", "too-many-lines", "trailing-whitespace", "missing-final-newline", "trailing-newlines", "multiple-statements", "superfluous-parens", "mixed-line-endings", "unexpected-line-ending-format", "multiple-imports", "wrong-import-order", "ungrouped-imports", "wrong-import-position", "useless-import-alias", "import-outside-toplevel", "unnecessary-lambda-assignment", "unnecessary-direct-lambda-call", "non-ascii-name", "non-ascii-module-import", "unnecessary-negation", "consider-using-enumerate", "consider-iterating-dictionary", "consider-using-dict-items", "use-maxsplit-arg", "use-sequence-for-iteration", "consider-using-f-string", "use-implicit-booleaness-not-len", "use-implicit-booleaness-not-comparison", "wrong-spelling-in-comment", "wrong-spelling-in-docstring", "invalid-characters-in-docstring", "bad-file-encoding", "useless-option-value", "literal-comparison", "comparison-with-itself", "comparison-of-constants", "no-classmethod-decorator", "no-staticmethod-decorator", "useless-object-inheritance", "property-with-parameters", "too-many-ancestors", "too-many-instance-attributes", "too-few-public-methods", "too-many-public-methods", "too-many-return-statements", "too-many-branches", "too-many-arguments", "too-many-locals", "too-many-statements", "too-many-boolean-expressions", "too-many-positional-arguments", "cyclic-import", "consider-using-from-import", "consider-merging-isinstance", "too-many-nested-blocks", "simplifiable-if-statement", "redefined-argument-from-local", "no-else-return", "consider-using-ternary", "trailing-comma-tuple", "stop-iteration-return", "simplify-boolean-expression", "inconsistent-return-statements", "useless-return", "consider-swap-variables", "consider-using-join", "consider-using-in", "consider-using-get", "chained-comparison", "consider-using-dict-comprehension", "consider-using-set-comprehension", "simplifiable-if-expression", "no-else-raise", "unnecessary-comprehension", "consider-using-sys-exit", "no-else-break", "no-else-continue", "super-with-arguments", "simplifiable-condition", "condition-evals-to-constant", "consider-using-generator", "use-a-generator", "consider-using-min-builtin", "consider-using-max-builtin", "consider-using-with", "unnecessary-dict-index-lookup", "use-list-literal", "use-dict-literal", "unnecessary-list-index-lookup", "use-yield-from", "duplicate-code"]

[tool.pylint.method_args]
timeout-methods = ["requests.api.delete", "requests.api.get", "requests.api.head", "requests.api.options", "requests.api.patch", "requests.api.post", "requests.api.put", "requests.api.request"]

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.refactoring]
max-nested-blocks = 4
never-returning-functions = ["sys.exit", "argparse.parse_error"]
suggest-join-with-non-empty-separator = true

[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
score = true

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 4

[tool.pylint.spelling]
max-spelling-suggestions = 4
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
generated-members = "inspect"
ignore-none = true
ignore-on-opaque-inference = true
ignored-checks-for-mixins = ["no-member", "not-async-context-manager", "not-context-manager", "attribute-defined-outside-init"]
ignored-classes = ["optparse.Values", "thread._local", "_thread._local", "argparse.Namespace"]
missing-member-hint = true
missing-member-hint-distance = 2
missing-member-max-choices = 1
mixin-class-rgx = ".*[Mm]ixin"

[tool.pylint.variables]
allow-global-unused-variables = true
callbacks = ["cb_", "_cb", "callback_"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
redefining-builtins-modules = ["six.moves", "past.builtins", "future.builtins", "builtins", "io"]
